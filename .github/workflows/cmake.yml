name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    #runs-on: ubuntu-latest
    #python-version: ['3.10']
    
    strategy:
      fail-fast:false
      matrix:
        kind:['windows','linux','macOS']
        #kind:['linux']
        include:
          -kind:windows
            os:windows-latest
            target:win-x64
            extension:'.zip'
          -kind:linux
            os:ubuntu-latest
            target:linux-x64
            extension:'.tar.gz'
          -kind:macOS
            os:macos-latest
            target:osx-x64
            extension:'.tar.gz'

    runs-on:${{matrix.os}}
    
    steps:
    - uses: actions/checkout@v3

    # ${{ matrix.python-version }}
    #- name: Set up Python 3.10
    #  uses: actions/setup-python@v2
    #  with:
    #    python-version: 3.10

    - name: Symlink to gfortran (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo ln -fs /usr/bin/gfortran-10 /usr/local/bin/gfortran
        sudo ln -fs /usr/bin/gcc-10 /usr/local/bin/gcc
        sudo ln -fs /usr/bin/g++-10 /usr/local/bin/g++

    - name: print
      run: |
        echo ${{github.workspace}}
        ls
        pwd
    #- name: install 
      #run: echo ${{github.workspace}}

    - name: Configure CMake "Unix Makefiles" .
      run: |
        cmake "Unix Makefiles" .
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    #- name: Run CMake
    #  # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #  # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #  run: cmake -G ${{github.workspace}} .

    - name: Build
      # Build your program with the given configuration
      #run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      run: make -j2
      #run: mingw -j8
      
    - name: Test
      #working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: | #ctest -C ${{env.BUILD_TYPE}}
        Binaries/mystran Build_Test_Cases/statics/BAR-I12.DAT
        Binaries/mystran Build_Test_Cases/statics/cshear.bdf

    -name: 打包Linux/macOS可执行文件
      if:matrix.kind!='windows'
      run:|
        cd ./publish/${{ matrix.kind }}
        tar -czvf ../../Mystran-${{ matrix.kind }}-${{ steps.get_version.outputs.VERSION }}${{ matrix.extension }} *
      
    # 上传构建产物作为工作流构件(artifacts)
    -name: 上传构建产物bj
      uses:actions/upload-artifact@v4
      with:
        name:Mystran-${{matrix.kind}}-${{steps.get_version.outputs.VERSION}}
        path:./Mystran-${{matrix.kind}}-${{steps.get_version.outputs.VERSION}}${{matrix.extension}}
        retention-days:1

upload-to-release:
    needs:build
    runs-on:ubuntu-latest
    
    steps:
      -name:提取版本号
        id:get_version
        shell:bash
        run:echo"VERSION=${GITHUB_REF#refs/tags/v}">>$GITHUB_OUTPUT
      
      # 下载所有平台构建产物
#      -name:下载Windows构建产物
#        uses:actions/download-artifact@v4
#        with:
#          name:Mystran-windows-${{steps.get_version.outputs.VERSION}}
#          path:./artifacts
      
      -name:下载Linux构建产物
        uses:actions/download-artifact@v4
        with:
          name:Mystran-linux-${{steps.get_version.outputs.VERSION}}
          path:./artifacts
      
#      -name:下载macOS构建产物
#        uses:actions/download-artifact@v4
#        with:
#          name:Mystran-macOS-${{steps.get_version.outputs.VERSION}}
#          path:./artifacts
      
      # 列出下载的文件以确认
      -name:列出下载的文件
        run:ls-la./artifacts
      
      # 统一上传到GitHub Release
      -name:上传所有文件到GitHubRelease
        uses:softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN:${{secrets.GITHUB_TOKEN}}
        with:
          files:./artifacts/*
          tag_name:${{github.ref}}
          fail_on_unmatched_files:false
          draft:false
          name:Mystran版本${{steps.get_version.outputs.VERSION}}
          generate_release_notes:true 
